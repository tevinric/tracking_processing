import requests
import os
import json
import uuid

base_url = os.environ.get('base_url')
client_id = os.environ.get('client_id')
client_secret = os.environ.get('client_secret')
scope = os.environ.get('scope')

# FUNCTION TO GENERATE A VALID TOKEN
def get_token():
    url = f"{base_url}/token"
    payload = f"grant_type=client_credentials&client_id={client_id}&client_secret={client_secret}&scope={scope}"
    headers = {
    'Content-Type': 'application/x-www-form-urlencoded',
    'Cookie': ''
    }
    response = requests.request("GET", url, headers=headers, data=payload)
    token = response.json()['access_token']
    
    return token

# FUNCTION TO GET ACTIVE POLICIES BY IDNUMBER

def get_active_policies(id_number,token):
    """_summary_

    Args:
        id_number (str): Customer ID number to search for linked actuve policy numbers
        token (str): Authentication token generated by the KONG authentication server
        
    Returns:
        response (json): A JSON object containing the response code, a list of active policies and ava-correlation-id
    
    """
    url = f"{base_url}/esb/api/v2/persons/{id_number}/details?type=IDNUMBER"
    payload = ""
    ava_correlation_id = f"ava-{str(uuid.uuid4())}"
    headers = {
    'Authorization': f"Bearer {token}",
    'correlationId': ava_correlation_id, #Generate a unique correlation ID for ava-record
    'Cookie': ""
    }

    response = requests.request("GET", url, headers=headers, data=payload)

    # Initialize an empty list to store active policy reference numbers  
    activePolicies = [] 
    
    if response.status_code == 200:
        response_code = response.status_code
        data = response.json()
    
        # Iterate through each client detail  
        for client in data['clientDetails']:  
            # Check if 'statusDescription' contains the word 'active' (case insensitive)  
            if 'active' in client['statusDescription'].lower():  
                activePolicies.append(client['referenceNumber'])  
    

    else:
        response_code = response.status_code
        print(f"Failed to retrieve data: {response.status_code}")

    output_response = {
        "response_code": response_code,
        "activePolicies": activePolicies,
        "correlationId": ava_correlation_id
    }
    
    return output_response


def get_vehicles(token, policyNumber):
    """_summary_

    Args:
        policy_number (str): Policy number to search for policy details
    """
    
    import requests

    url = f"{base_url}/esb/api/v1/policies/{policyNumber}/detail?filter=vehicle"

    correlation_id = f"ava-{str(uuid.uuid4())}"
    
    payload = ""
    headers = {
    'Authorization': f"Bearer {token}",
    'correlationId': correlation_id,
    'Cookie': ''
    }

    response = requests.request("GET", url, headers=headers, data=payload)
    
    data = response.json()
    policyDetails = data["policyDetailResponse"]
    vehicleDetails = policyDetails[0]["vehicleDetailsArray"]
    vehicles = {}
    for vehicle in vehicleDetails:
        if vehicle["statusDescription"].strip() != "": 
            # Prepare the vehicle details dictionary
            vehicleDetailValues = {"year": vehicle["year"],
                                    "make": vehicle["make"],
                                    "model": vehicle["model"],
                                    "colour": vehicle["colour"],
                                    "registrationNumber": vehicle["registrationNumber"],
                                    "vinNumber": vehicle["vinNumber"],
                                    "engineNumber": vehicle["engineNumber"],
                                    "riskItemSequenceNumber": vehicle["riskItemSequenceNumber"],
                                    "coverTypeDescription": vehicle["coverTypeDescription"],
                                    "statusDescription": vehicle["statusDescription"],
                                    "vehicleActiveIndicator": vehicle["vehicleActiveIndicator"]
                                    }
            
            vehicle = {int(vehicle["riskItemSequenceNumber"]): vehicleDetailValues}
            
            vehicles.update(vehicle)
            
    return vehicles
    
    

